def findClosestValueInBst(tree, target):
	return findClosestValueInBstHelp(tree,target,float("inf"))

def findClosestValueInBstHelp(tree, target, closest):
	if tree is None:
		return closest
	if abs(target - closest) > abs(target - tree.value):
		closest = tree.value
	if target < tree.value:
		return findClosestValueInBstHelp(tree.left, target, closest)
	elif target > tree.value:
		return findClosestValueInBstHelp(tree.right, target, closest)
	else:
		return closest
# This is the class of the input tree. Do not edit.
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


def findClosestValueInBst(tree, target):
	return findClosestValueInBstHelp(tree,target,float("inf"))

def findClosestValueInBstHelp(tree, target, closest):
	cNode = tree
	while cNode is not None:
		if abs(target - closest) > abs(target - cNode.value):
			closest = cNode.value
		if target < cNode.value:
			cNode = cNode.left
		elif target > tree.value:
			cNode = cNode.right
		else:
			break
	return closest
# This is the class of the input tree. Do not edit.
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
